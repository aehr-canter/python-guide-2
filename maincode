{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aehr-canter/pythonguide2/blob/main/Copy_of_P2_Python_Pt_2_(Nested_Loops%2C_Matrices%2C_Importing%2C_and_Calling_Functions).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "516Ip-B7RQNL"
      },
      "source": [
        "## Welcome Back and Review\n",
        "\n",
        "Welcome back to the world of Python!\n",
        "\n",
        "Last lesson, we covered topics such as variables, input/output, conditionals, lists, and loops. In this lesson, we'll expand on those topics by talking about 2D lists (also known as matrices) and nested loops (loops within loops), and we'll cover new topics such as importing libraries and using functions.\n",
        "\n",
        "Let's jump right into coding with a quick review example!\n",
        "\n",
        "![alt text](https://media.giphy.com/media/3oKIPnAiaMCws8nOsE/giphy.gif)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DgN7uVbwXnHx"
      },
      "source": [
        "Write a program that takes an integer input and prints the factorial of that integer. You can assume the input will always be a positive integer.\n",
        "\n",
        "For those who have not seen factorials before, it is the product of an integer and every positive integer below it. We usually represent factorials by writing the number followed by an exclamation mark. \"Five factorial\" would be $ 5! $, which written out is:\n",
        "\n",
        "$$ 5! = 1 * 2 * 3 * 4 * 5 = 120 $$\n",
        "\n",
        "An example run of this program might look like:\n",
        "\n",
        "```\n",
        "Input an integer: 5\n",
        "The factorial is: 120\n",
        "```\n",
        "\n",
        "Be sure to use a loop (either `for` or `while`) to accomplish this task!"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1CsuI7k7Wq0Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "38b5d68e-db36-4594-ee76-096455395899"
      },
      "source": [
        "# To get you started, the line to get input is provided below\n",
        "number = int(input(\"Input an integer: \"))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Input an integer: 5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "It8igJ-LeiOB"
      },
      "source": [
        "## Debugging\n",
        "\n",
        "In this lesson, we'll start to shift from reading code to writing more code. When writing code, we often run into errors or end up with programs that might not run exactly as we wanted. This is ok! In fact, all of the best programmers in the world still make errors and mistakes in their code.\n",
        "\n",
        "One of the tools in a programmer's toolbox is figuring out how to look for errors, or \"bugs\", in their code. The process of finding and removing bugs in your code is called **debugging**, and from computer science folklore, the origin of this word comes from legendary computer scientist Grace Hopper, who once found an actual moth in her computer (back when they were the size of rooms) that caused an error in its calculations.\n",
        "\n",
        "![alt text](http://www.pitt.edu/~super1/lecture/lec44911/img019.JPG)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZnZ113AQfzUt"
      },
      "source": [
        "Let's look at the following code block. It's intended to print out the numbers from 1 to 5, but something's wrong. Can you debug it and figure out what needs to be changed?"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "316euGkXf_NH"
      },
      "source": [
        "for num in range(1,5):\n",
        "  print(num)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-uvBwayhgFgx"
      },
      "source": [
        "Sometimes bugs are hard to find, and it's helpful to add print statements to see what the values of certain variables are at that point in time. Say we want to write a program that takes in an word input and checks if the characters `un` were found in that input:"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ID5TtK_gldV"
      },
      "source": [
        "# There's an error in this program -- can you spot it?\n",
        "check = 'um'\n",
        "\n",
        "# Pretend that there were hundreds of lines of code here\n",
        "# So that the lines you see above\n",
        "# And the lines you see below\n",
        "# Aren't right next to each other\n",
        "# You might look to find an error in the code below\n",
        "# But it turns out the bug is somewhere else...\n",
        "\n",
        "word = input(\"Input a word: \")\n",
        "\n",
        "if check in word:\n",
        "  print(\"Found 'un'!\")"
      ],
      "execution_count": null,
      "outputs": []
    },
